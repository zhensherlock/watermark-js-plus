import{_ as e,C as a,c as t,o as l,G as n,b3 as r}from"./chunks/framework.qjfQtuj5.js";const E=JSON.parse('{"title":"Watermark Core Functions","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"config/function.md","filePath":"config/function.md"}'),o={name:"config/function.md"};function h(p,i,c,d,k,g){const s=a("el-backtop");return l(),t("div",null,[n(s),i[0]||(i[0]=r(`<h1 id="watermark-core-functions" tabindex="-1">Watermark Core Functions <a class="header-anchor" href="#watermark-core-functions" aria-label="Permalink to &quot;Watermark Core Functions&quot;">​</a></h1><h2 id="create" tabindex="-1">create() <a class="header-anchor" href="#create" aria-label="Permalink to &quot;create()&quot;">​</a></h2><ul><li><strong>Description</strong>: Creates and renders the watermark on the specified parent element</li><li><strong>Behavior</strong>: <ul><li>Validates watermark uniqueness in the DOM (throws error if duplicate found)</li><li>Checks content validity based on contentType (text/image/rich-text)</li><li>Generates watermark canvas with configured styles (rotation, opacity, etc.)</li><li>Converts canvas to background image with proper positioning</li><li>Applies defensive CSS (!important flags, pointer-events: none)</li><li>Handles both fixed (body/html) and custom parent elements</li><li>Sets up MutationObserver if mutationObserve=true</li><li>Triggers <code>onSuccess</code> callback only on first creation</li></ul></li><li><strong>Returns</strong>: <code>Promise&lt;void&gt;</code></li><li><strong>Example</strong>:</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> watermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="destroy" tabindex="-1">destroy() <a class="header-anchor" href="#destroy" aria-label="Permalink to &quot;destroy()&quot;">​</a></h2><ul><li><strong>Description</strong>: Completely removes the watermark and cleans up observers</li><li><strong>Behavior</strong>: <ul><li>Triggers <code>onBeforeDestroy()</code> callback</li><li>Disconnects all MutationObservers</li><li>Removes watermark DOM nodes</li><li>Triggers <code>onDestroyed()</code> callback</li></ul></li><li><strong>Example</strong>:</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="check" tabindex="-1">check() <a class="header-anchor" href="#check" aria-label="Permalink to &quot;check()&quot;">​</a></h2><ul><li><strong>Description</strong>: Verifies watermark DOM existence</li><li><strong>Returns</strong>: <code>Promise&lt;boolean&gt;</code><ul><li>true: Watermark exists in parentElement</li><li>false: Watermark not found</li></ul></li><li><strong>Example</strong>:</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> watermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="changeoptions" tabindex="-1">changeOptions() <a class="header-anchor" href="#changeoptions" aria-label="Permalink to &quot;changeOptions()&quot;">​</a></h2><ul><li><strong>Description</strong>: Updates watermark configuration</li><li><strong>Parameters</strong>: <ul><li>args: <code>Partial&lt;WatermarkOptions&gt;</code> - New configuration options</li><li>mode: &#39;overwrite&#39;|&#39;append&#39; - How to merge new options</li><li>redraw: boolean - Whether to recreate immediately (default: true)</li></ul></li><li><strong>Behavior</strong>: <ul><li>Merges new options according to specified mode</li><li>Enables protection if monitorProtection=true</li><li>Recreates watermark if redraw=true</li></ul></li><li><strong>Returns</strong>: <code>Promise&lt;void&gt;</code></li><li><strong>Example</strong>:</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> watermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">changeOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;New Text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;append&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="technical-details" tabindex="-1">Technical Details <a class="header-anchor" href="#technical-details" aria-label="Permalink to &quot;Technical Details&quot;">​</a></h2><ul><li><strong>DOM Structure</strong>:</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;watermark&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/* defensive CSS */&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/* background image styles */&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><p><strong>Protection Mechanisms</strong>:</p><ul><li>MutationObserver for DOM tampering detection</li><li>Automatic recreation when modified</li><li>CSS !important overrides</li></ul></li><li><p><strong>Lifecycle Callbacks</strong>:</p><ul><li><code>onSuccess</code>: After successful creation</li><li><code>onBeforeDestroy</code>: Before removal</li><li><code>onDestroyed</code>: After removal</li><li><code>onObserveError</code>: When MutationObserver fails</li></ul></li></ul>`,17))])}const m=e(o,[["render",h]]);export{E as __pageData,m as default};
