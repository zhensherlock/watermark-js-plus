import{_ as a,C as t,c as l,o as e,G as n,b3 as o}from"./chunks/framework.DTwuuUNv.js";const E=JSON.parse('{"title":"水印核心功能","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"zh/config/function.md","filePath":"zh/config/function.md"}'),r={name:"zh/config/function.md"};function h(p,i,k,d,c,g){const s=t("el-backtop");return e(),l("div",null,[n(s),i[0]||(i[0]=o(`<h1 id="水印核心功能" tabindex="-1">水印核心功能 <a class="header-anchor" href="#水印核心功能" aria-label="Permalink to &quot;水印核心功能&quot;">​</a></h1><h2 id="create" tabindex="-1">create() <a class="header-anchor" href="#create" aria-label="Permalink to &quot;create()&quot;">​</a></h2><ul><li><strong>描述</strong>: 在指定父元素上创建并渲染水印</li><li><strong>行为</strong>: <ul><li>验证DOM中水印的唯一性（如果发现重复则抛出错误）</li><li>根据contentType（文本/图片/富文本）检查内容有效性</li><li>使用配置的样式（旋转、透明度等）生成水印画布</li><li>将画布转换为带有正确定位的背景图片</li><li>应用防御性CSS（!important标记，pointer-events: none）</li><li>处理固定（body/html）和自定义父元素</li><li>如果mutationObserve=true，则设置MutationObserver</li><li>仅在首次创建时触发 <code>onSuccess</code> 回调</li></ul></li><li><strong>返回</strong>: <code>Promise&lt;void&gt;</code></li><li><strong>示例</strong>:</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> watermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="destroy" tabindex="-1">destroy() <a class="header-anchor" href="#destroy" aria-label="Permalink to &quot;destroy()&quot;">​</a></h2><ul><li><strong>描述</strong>: 完全移除水印并清理观察者</li><li><strong>行为</strong>: <ul><li>触发 <code>onBeforeDestroy()</code> 回调</li><li>断开所有 MutationObservers</li><li>移除水印DOM节点</li><li>触发 <code>onDestroyed()</code> 回调</li></ul></li><li><strong>示例</strong>:</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="check" tabindex="-1">check() <a class="header-anchor" href="#check" aria-label="Permalink to &quot;check()&quot;">​</a></h2><ul><li><strong>描述</strong>: 验证水印在DOM中的存在性</li><li><strong>返回</strong>: <code>Promise&lt;boolean&gt;</code><ul><li>true: 水印存在于父元素中</li><li>false: 未找到水印</li></ul></li><li><strong>示例</strong>:</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> watermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="changeoptions" tabindex="-1">changeOptions() <a class="header-anchor" href="#changeoptions" aria-label="Permalink to &quot;changeOptions()&quot;">​</a></h2><ul><li><strong>描述</strong>: 更新水印配置</li><li><strong>参数</strong>: <ul><li>args: <code>Partial&lt;WatermarkOptions&gt;</code> - 新的配置选项</li><li>mode: &#39;overwrite&#39;|&#39;append&#39; - 如何合并新选项</li><li>redraw: boolean - 是否立即重新创建 (默认: true)</li></ul></li><li><strong>行为</strong>: <ul><li>根据指定模式合并新选项</li><li>如果 monitorProtection=true，则启用保护</li><li>如果 redraw=true，则重新创建水印</li></ul></li><li><strong>返回</strong>: <code>Promise&lt;void&gt;</code></li><li><strong>示例</strong>:</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> watermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">changeOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;New Text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;append&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="技术细节" tabindex="-1">技术细节 <a class="header-anchor" href="#技术细节" aria-label="Permalink to &quot;技术细节&quot;">​</a></h2><ul><li><strong>DOM Structure</strong>:</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;watermark&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/* 防御性CSS */&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/* 背景图片样式 */&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><p><strong>保护机制</strong>:</p><ul><li>MutationObserver用于检测DOM篡改</li><li>修改时自动重新创建</li><li>CSS !important覆盖</li></ul></li><li><p><strong>生命周期回调</strong>:</p><ul><li><code>onSuccess</code>: 成功创建后触发</li><li><code>onBeforeDestroy</code>: 移除前触发</li><li><code>onDestroyed</code>: 移除后触发</li><li><code>onObserveError</code>: MutationObserver 失败时触发</li></ul></li></ul>`,17))])}const y=a(r,[["render",h]]);export{E as __pageData,y as default};
