import{_ as a,C as e,c as l,o,G as n,b3 as t}from"./chunks/framework.qjfQtuj5.js";const u=JSON.parse('{"title":"盲水印解码","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"zh/config/blind-decode.md","filePath":"zh/config/blind-decode.md"}'),r={name:"zh/config/blind-decode.md"};function h(c,i,d,p,k,g){const s=e("el-backtop");return o(),l("div",null,[n(s),i[0]||(i[0]=t(`<h1 id="盲水印解码" tabindex="-1">盲水印解码 <a class="header-anchor" href="#盲水印解码" aria-label="Permalink to &quot;盲水印解码&quot;">​</a></h1><h2 id="url" tabindex="-1">url <a class="header-anchor" href="#url" aria-label="Permalink to &quot;url&quot;">​</a></h2><ul><li><strong>类型:</strong> <code>string</code></li><li><strong>默认值:</strong> <code>&#39;&#39;</code></li><li><strong>描述:</strong> 需要解码的图片路径(URL或base64)</li></ul><h2 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to &quot;mode&quot;">​</a></h2><ul><li><strong>类型:</strong> <code>string</code></li><li><strong>默认值:</strong> <code>&#39;canvas&#39;</code></li><li><strong>可选值:</strong> <code>&#39;canvas&#39;</code></li><li><strong>描述:</strong> 解码模式，目前仅支持canvas方式</li></ul><h2 id="fillcolor" tabindex="-1">fillColor <a class="header-anchor" href="#fillcolor" aria-label="Permalink to &quot;fillColor&quot;">​</a></h2><ul><li><strong>类型:</strong> <code>string</code></li><li><strong>默认值:</strong> <code>&#39;#000&#39;</code></li><li><strong>描述:</strong> 解码时使用的填充颜色，影响最终解码效果</li></ul><h2 id="compositeoperation" tabindex="-1">compositeOperation <a class="header-anchor" href="#compositeoperation" aria-label="Permalink to &quot;compositeOperation&quot;">​</a></h2><ul><li><strong>类型:</strong> <code>string</code></li><li><strong>默认值:</strong> <code>&#39;color-burn&#39;</code></li><li><strong>描述:</strong> 图像合成操作类型，用于增强水印可见性</li></ul><h2 id="compositetimes" tabindex="-1">compositeTimes <a class="header-anchor" href="#compositetimes" aria-label="Permalink to &quot;compositeTimes&quot;">​</a></h2><ul><li><strong>类型:</strong> <code>number</code></li><li><strong>默认值:</strong> <code>3</code></li><li><strong>描述:</strong> 合成操作的重复次数，次数越多水印越明显</li></ul><h2 id="onsuccess" tabindex="-1">onSuccess <a class="header-anchor" href="#onsuccess" aria-label="Permalink to &quot;onSuccess&quot;">​</a></h2><ul><li><strong>类型:</strong> <code>Function</code></li><li><strong>默认值:</strong> <code>undefined</code></li><li><strong>描述:</strong> 解码成功后的回调函数，参数为解码后的图像数据</li></ul><h2 id="解码原理" tabindex="-1">解码原理 <a class="header-anchor" href="#解码原理" aria-label="Permalink to &quot;解码原理&quot;">​</a></h2><p>盲水印解码通过以下步骤实现:</p><ol><li>加载包含盲水印的图片</li><li>创建canvas并绘制原图</li><li>应用指定的合成操作(compositeOperation)和填充颜色(fillColor)</li><li>多次重复合成操作(compositeTimes)以增强水印可见性</li><li>输出处理后的图像</li></ol><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BlindWatermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image-with-watermark.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fillColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compositeOperation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;color-burn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decodedImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理解码后的图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,18))])}const m=a(r,[["render",h]]);export{u as __pageData,m as default};
