import{_ as a,I as s,c as n,o as l,J as o,b4 as t}from"./chunks/framework.D7_Q5RFF.js";const u=JSON.parse('{"title":"Blind Watermark Decoding","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"config/blind-decode.md","filePath":"config/blind-decode.md"}'),r={name:"config/blind-decode.md"};function d(c,i,p,h,g,k){const e=s("el-backtop");return l(),n("div",null,[o(e),i[0]||(i[0]=t(`<h1 id="blind-watermark-decoding" tabindex="-1">Blind Watermark Decoding <a class="header-anchor" href="#blind-watermark-decoding" aria-label="Permalink to “Blind Watermark Decoding”">​</a></h1><h2 id="url" tabindex="-1">url <a class="header-anchor" href="#url" aria-label="Permalink to “url”">​</a></h2><ul><li><strong>Type</strong>: <code>string</code></li><li><strong>Default</strong>: <code>&#39;&#39;</code></li><li><strong>Description</strong>: Path to the image requiring decoding (URL or base64)</li></ul><h2 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to “mode”">​</a></h2><ul><li><strong>Type</strong>: <code>string</code></li><li><strong>Default</strong>: <code>&#39;canvas&#39;</code></li><li><strong>Available Values</strong>: <code>&#39;canvas&#39;</code></li><li><strong>Description</strong>: Decoding mode, currently only canvas method is supported</li></ul><h2 id="fillcolor" tabindex="-1">fillColor <a class="header-anchor" href="#fillcolor" aria-label="Permalink to “fillColor”">​</a></h2><ul><li><strong>Type</strong>: <code>string</code></li><li><strong>Default</strong>: <code>&#39;#000&#39;</code></li><li><strong>Description</strong>: Fill color used during decoding, affects final decoding result</li></ul><h2 id="compositeoperation" tabindex="-1">compositeOperation <a class="header-anchor" href="#compositeoperation" aria-label="Permalink to “compositeOperation”">​</a></h2><ul><li><strong>Type</strong>: <code>string</code></li><li><strong>Default</strong>: <code>&#39;color-burn&#39;</code></li><li><strong>Description</strong>: Image composite operation type used to enhance watermark visibility</li></ul><h2 id="compositetimes" tabindex="-1">compositeTimes <a class="header-anchor" href="#compositetimes" aria-label="Permalink to “compositeTimes”">​</a></h2><ul><li><strong>Type</strong>: <code>number</code></li><li><strong>Default</strong>: <code>3</code></li><li><strong>Description</strong>: Number of composite operation repetitions - more repetitions make watermark more visible</li></ul><h2 id="onsuccess" tabindex="-1">onSuccess <a class="header-anchor" href="#onsuccess" aria-label="Permalink to “onSuccess”">​</a></h2><ul><li><strong>Type</strong>: <code>Function</code></li><li><strong>Default</strong>: <code>undefined</code></li><li><strong>Description</strong>: Callback function after successful decoding, parameter contains decoded image data</li></ul><h2 id="decoding-principle" tabindex="-1">Decoding Principle <a class="header-anchor" href="#decoding-principle" aria-label="Permalink to “Decoding Principle”">​</a></h2><p>Blind watermark decoding works through these steps:</p><ol><li>Load image containing blind watermark</li><li>Create canvas and draw original image</li><li>Apply specified composite operation and fill color</li><li>Repeat composite operation multiple times to enhance watermark visibility</li><li>Output processed image</li></ol><h2 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to “Usage Example”">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BlindWatermark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image-with-watermark.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fillColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compositeOperation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;color-burn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decodedImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle decoded image</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,18))])}const E=a(r,[["render",d]]);export{u as __pageData,E as default};
